{"version":3,"sources":["components/grid-node.js","components/grid.js","algorithm.js","components/grid-canvas/index.jsx","app.js","serviceWorker.js","index.js"],"names":["GridNode","x","y","ctx","size","stroke","f","g","h","parent","undefined","walkable","this","fill","draw","Math","round","beginPath","lineWidth","strokeStyle","rect","color","fillStyle","fillRect","Grid","canvas","nodeSize","nodeStroke","w","gridNodes","startNode","endNode","i","j","addNode","find","node","gridNode","push","forEach","neighbours","node0","node1","node2","node3","node4","node5","node6","node7","getContext","getDistance","goalNode","distanceX","abs","distanceY","min","GridCanvas","props","width","height","gridCanvas","useRef","useState","grid","setGrid","startNodeLocation","setStartNodeLocation","endNodeLocation","setEndNodeLocation","clickReset","setClickReset","animationSpeed","setAnimationSpeed","canvasHeight","canvasWidth","resetGrid","current","newGrid","init","animatePath","path","timeoutIndex","newTimeoutIndex","setTimeout","Promise","resolve","clickFindPath","openList","closedList","currentNode","spliceIndex","length","splice","reverse","retracePath","getAdjacentNodes","closedListedNode","closedNode","newNodeCost","openListedNode","openedNode","findPath","openClosedList","sort","aNode","bNode","then","all","useEffect","useLayoutEffect","className","style","backgroundColor","padding","borderRadius","fontWeight","onClick","event","canvasLeft","offsetLeft","canvasTop","offsetTop","pageX","pageY","setStartNode","location","setEndNode","setWalkable","preventDefault","ref","id","type","name","onChange","htmlFor","checked","App","setCanvasWidth","setCanvasHeight","updateSize","window","outerWidth","addEventListener","removeEventListener","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.96dd0322.chunk.js","sourcesContent":["export default class GridNode {\r\n  constructor(x, y, ctx, size, stroke, f = 0, g = 0, h = 0, parent = undefined, walkable = true) {\r\n    this.x = x\r\n    this.y = y\r\n    this.ctx = ctx\r\n    this.size = size\r\n    this.stroke = stroke\r\n    this.f = f\r\n    this.g = g\r\n    this.h = h\r\n    this.parent = parent\r\n    this.walkable = walkable\r\n  }\r\n\r\n  setWalkable(walkable) {\r\n    this.walkable = walkable\r\n    if (walkable) {\r\n      this.fill('white')\r\n      this.draw()\r\n    } else if (!walkable) {\r\n      this.fill('black')\r\n    }\r\n  }\r\n\r\n  location() {\r\n    const x = Math.round((this.x / this.size) + 1)\r\n    const y = Math.round((this.y / this.size) + 1)\r\n    return `${x}, ${y}`\r\n  }\r\n\r\n  draw() {\r\n    this.ctx.beginPath()\r\n    this.ctx.lineWidth = this.stroke\r\n    this.ctx.strokeStyle = 'gray'\r\n    this.ctx.rect(this.x, this.y, this.size, this.size)\r\n    this.ctx.stroke()\r\n  }\r\n\r\n  fill(color) {\r\n    this.ctx.beginPath()\r\n    this.ctx.fillStyle = color\r\n    this.ctx.fillRect(this.x, this.y, this.size, this.size)\r\n  }\r\n}\r\n","import GridNode from './grid-node.js'\r\n\r\nexport default class Grid {\r\n  constructor(canvas, nodeSize, nodeStroke, w, h, gridNodes = [], startNode = null, endNode = null) {\r\n    this.canvas = canvas\r\n    this.nodeSize = nodeSize\r\n    this.nodeStroke = nodeStroke\r\n    this.w = w\r\n    this.h = h\r\n    this.gridNodes = gridNodes\r\n    this.startNode = startNode\r\n    this.endNode = endNode\r\n  }\r\n\r\n  get ctx() {\r\n    if (this.canvas && this.canvas.getContext) {\r\n      return this.canvas.getContext('2d')\r\n    }\r\n    return null\r\n  }\r\n\r\n  init() {\r\n    let y = this.nodeStroke\r\n    for (let i = 0; i < this.h; i++) {\r\n      let x = this.nodeStroke\r\n      for (let j = 0; j < this.w; j++) {\r\n        this.addNode(x, y)\r\n        x += this.nodeSize\r\n      }\r\n      y += this.nodeSize\r\n    }\r\n  }\r\n\r\n  addNode(x, y) {\r\n    const existingNode = this.gridNodes.find(node => node.x === x && node.y === y)\r\n    if (!existingNode) {\r\n      const gridNode = new GridNode(x, y, this.ctx, this.nodeSize, this.nodeStroke)\r\n      this.gridNodes.push(gridNode)\r\n    }\r\n  }\r\n\r\n  draw() {\r\n    this.gridNodes.forEach((gridNode) => {\r\n      gridNode.fill('white')\r\n      gridNode.draw()\r\n    })\r\n  }\r\n\r\n  setStartNode(gridNode) {\r\n    this.startNode = gridNode\r\n    gridNode && gridNode.fill('blue')\r\n  }\r\n\r\n  setEndNode(gridNode) {\r\n    this.endNode = gridNode\r\n    gridNode && gridNode.fill('red')\r\n  }\r\n\r\n  getAdjacentNodes(gridNode) {\r\n    const neighbours = []\r\n    const node0 = this.gridNodes.find((node) => {\r\n      return node.x === gridNode.x && node.y === (gridNode.y - gridNode.size)\r\n    })\r\n    const node1 = this.gridNodes.find((node) => {\r\n      return node.x === gridNode.x && node.y === (gridNode.y + gridNode.size)\r\n    })\r\n    const node2 = this.gridNodes.find((node) => {\r\n      return node.x === (gridNode.x - gridNode.size) && node.y === gridNode.y \r\n    })\r\n    const node3 = this.gridNodes.find((node) => {\r\n      return node.x === (gridNode.x + gridNode.size) && node.y === gridNode.y\r\n    })\r\n    const node4 = this.gridNodes.find((node) => {\r\n      return node.x === (gridNode.x + gridNode.size) && node.y === (gridNode.y - gridNode.size)\r\n    })\r\n    const node5 = this.gridNodes.find((node) => {\r\n      return node.x === (gridNode.x - gridNode.size) && node.y === (gridNode.y - gridNode.size)\r\n    })\r\n    const node6 = this.gridNodes.find((node) => {\r\n      return node.x === (gridNode.x + gridNode.size) && node.y === (gridNode.y + gridNode.size)\r\n    })\r\n    const node7 = this.gridNodes.find((node) => {\r\n      return node.x === (gridNode.x - gridNode.size) && node.y === (gridNode.y + gridNode.size)\r\n    })\r\n  \r\n    node0 && neighbours.push(node0)\r\n    node1 && neighbours.push(node1)\r\n    node2 && neighbours.push(node2)\r\n    node3 && neighbours.push(node3)\r\n    node4 && neighbours.push(node4)\r\n    node5 && neighbours.push(node5)\r\n    node6 && neighbours.push(node6)\r\n    node7 && neighbours.push(node7)\r\n  \r\n    return neighbours\r\n  }\r\n}\r\n","function getDistance(node, goalNode) {\r\n  const diagonalCost = 1.4\r\n  const distanceX = Math.abs(node.x - goalNode.x)\r\n  const distanceY = Math.abs(node.y - goalNode.y)\r\n\r\n  return (distanceX + distanceY) + (diagonalCost - 2) * Math.min(distanceX, distanceY)\r\n}\r\n\r\nfunction retracePath(startNode, endNode) {\r\n  const path = []\r\n  let currentNode = endNode\r\n\r\n  while (currentNode !== startNode) {\r\n    path.push(currentNode)\r\n    currentNode = currentNode.parent\r\n  }\r\n  return path.reverse()\r\n}\r\n\r\nexport default function findPath(grid) {\r\n  const { startNode, endNode } = grid\r\n  let openList = []\r\n  let closedList = []\r\n\r\n  startNode.h = getDistance(startNode, endNode)\r\n  openList.push(startNode)\r\n\r\n  while (openList.length > 0) {\r\n    let currentNode = openList[0]\r\n    let spliceIndex = 0\r\n    for (let i = 0; i < openList.length; i++) {\r\n      if (openList[i].f <= currentNode.f && openList[i].h < currentNode.h) {\r\n        currentNode = openList[i]\r\n        spliceIndex = i\r\n      }\r\n    }\r\n    openList.splice(spliceIndex, 1)\r\n    closedList.push(currentNode)\r\n\r\n    if (currentNode === endNode) {\r\n      const path = retracePath(startNode, endNode)\r\n      return {\r\n        path, startNode, endNode, closedList, openList\r\n      }\r\n    }\r\n\r\n    const adjacentNodes = grid.getAdjacentNodes(currentNode)\r\n    adjacentNodes.forEach((node) => {\r\n      const closedListedNode = closedList.find(closedNode => closedNode === node)\r\n      if (node.walkable && !closedListedNode) {\r\n        const newNodeCost = currentNode.g + getDistance(currentNode, node)\r\n        const openListedNode = openList.find(openedNode => openedNode === node)\r\n        if (newNodeCost < node.g || !openListedNode) {\r\n          node.g = newNodeCost\r\n          node.h = getDistance(node, endNode)\r\n          node.parent = currentNode\r\n          if (!openListedNode) {\r\n            openList.push(node)\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n}","import React, { useState, useEffect, useLayoutEffect, useRef } from 'react'\r\nimport Grid from '../grid'\r\nimport findPath from '../../algorithm'\r\nimport './grid-canvas.css'\r\n\r\nfunction GridCanvas(props) {\r\n  const { width, height, nodeSize, nodeStroke } = props\r\n  const gridCanvas = useRef()\r\n  const [grid, setGrid] = useState(new Grid())\r\n  const [startNodeLocation, setStartNodeLocation] = useState(null)\r\n  const [endNodeLocation, setEndNodeLocation] = useState(null)\r\n  const [clickReset, setClickReset] = useState(false)\r\n  const [animationSpeed, setAnimationSpeed] = useState(5)\r\n\r\n  const canvasHeight = (nodeSize * height) + (2 * nodeStroke)\r\n  const canvasWidth = (nodeSize * width) + (2 * nodeStroke)\r\n\r\n  const resetGrid = () => {\r\n    setClickReset(false)\r\n    setStartNodeLocation(null)\r\n    setEndNodeLocation(null)\r\n    const canvas = gridCanvas.current\r\n    const newGrid = new Grid(canvas, nodeSize, nodeStroke, width, height)\r\n    newGrid.init()\r\n    setGrid(newGrid)\r\n  }\r\n\r\n  const animatePath = (path, timeoutIndex, color) => {\r\n    let newTimeoutIndex = timeoutIndex\r\n    path.forEach((node) => {\r\n      newTimeoutIndex++\r\n      setTimeout(() => node.fill(color), (newTimeoutIndex * animationSpeed))\r\n    })\r\n    return Promise.resolve(newTimeoutIndex)\r\n  }\r\n\r\n  const clickFindPath = grid => {\r\n    let timeoutIndex = 0\r\n    const { path, openList, closedList, startNode, endNode } = findPath(grid)\r\n    const openClosedList = [...openList, ...closedList].sort((aNode, bNode) => {\r\n      if (aNode.f <= bNode.f && aNode.h <= bNode.h) {\r\n        return 1\r\n      }\r\n      return -1\r\n    })\r\n    animatePath(openClosedList, timeoutIndex, 'lightgreen')\r\n      .then(timeoutIndex => animatePath(path, timeoutIndex, 'green'))\r\n      .then(timeoutIndex => Promise.all([\r\n        animatePath([startNode], timeoutIndex, 'blue'),\r\n        animatePath([endNode], timeoutIndex, 'red')\r\n      ]))\r\n      .then(() => setClickReset(true))\r\n  }\r\n\r\n  useEffect(() => {\r\n    resetGrid()\r\n  }, [])\r\n\r\n  useLayoutEffect(() => {\r\n    grid.draw()\r\n  }, [grid, height, width])\r\n\r\n  const handleClick = (event) => {\r\n    if (clickReset) {\r\n      return resetGrid()\r\n    }\r\n    const canvas = gridCanvas.current\r\n    const canvasLeft = canvas.offsetLeft\r\n    const canvasTop = canvas.offsetTop\r\n\r\n    const x = event.pageX - canvasLeft\r\n    const y = event.pageY - canvasTop\r\n    const gridNode = grid.gridNodes.find((node) => {\r\n      return y > node.y && y < node.y + node.size && x > node.x && x < node.x + node.size\r\n    })\r\n    if (gridNode) {\r\n      if ((!grid.startNode && !grid.endNode)) {\r\n        grid.setStartNode(gridNode)\r\n        return setStartNodeLocation(gridNode.location())\r\n      } else if (grid.startNode && !grid.endNode) {\r\n        grid.setEndNode(gridNode)\r\n        return setEndNodeLocation(gridNode.location())\r\n      } else if (grid.startNode && grid.endNode) {\r\n        return gridNode.setWalkable(!gridNode.walkable)\r\n      }\r\n    }\r\n    return event.preventDefault()\r\n  }\r\n\r\n  const RenderHeaderText = () => {\r\n    if (!startNodeLocation) {\r\n      return <p>Click a node to set the <span style={{ color: 'blue', backgroundColor: 'azure', padding: '0 0.2rem', borderRadius: '0.2rem' }}>START</span> position.</p>\r\n    }\r\n    if (!endNodeLocation) {\r\n      return <p>Click a node to set the <span style={{ color: 'red', backgroundColor: 'azure', padding: '0 0.2rem', borderRadius: '0.2rem' }}>END</span> position.</p>\r\n    }\r\n    if (clickReset) {\r\n      return (\r\n        <p>Drawing shortest path from&nbsp;\r\n          <span style={{ color: 'blue', backgroundColor: 'azure', padding: '0 0.2rem', borderRadius: '0.2rem' }}>{startNodeLocation}</span> to&nbsp;\r\n          <span style={{ color: 'red', backgroundColor: 'azure', padding: '0 0.2rem', borderRadius: '0.2rem' }}>{endNodeLocation}</span>&nbsp;\r\n          <em style={{ color: 'lightgray', fontWeight: 300 }}>(Click anywhere to reset)</em>\r\n        </p>\r\n      )\r\n    }\r\n    return <p>Click nodes to create/remove <span style={{ color: 'black', backgroundColor: 'azure', padding: '0 0.2rem', borderRadius: '0.2rem' }}>WALL</span> obstacles.</p>\r\n  }\r\n\r\n  return (\r\n    <div className=\"grid-canvas\">\r\n      <div className=\"grid-canvas-header\">\r\n        <RenderHeaderText />\r\n      </div>\r\n      <canvas className=\"grid\" height={canvasHeight} width={canvasWidth} onClick={handleClick} ref={gridCanvas} />\r\n      <div className=\"grid-canvas-footer\">\r\n        <div className=\"grid-canvas-labels\">\r\n          <div id=\"start-node-label\">\r\n            {startNodeLocation\r\n              ? `Start Node: ${startNodeLocation}`\r\n              : 'Start node is not set.'\r\n            }\r\n          </div>\r\n          <div id=\"end-node-label\">\r\n            {endNodeLocation\r\n              ? `End Node: ${endNodeLocation}`\r\n              : 'End node is not set.'\r\n            }\r\n          </div>\r\n        </div>\r\n        <div className=\"grid-canvas-speed\">\r\n          <p>Animation speed:</p>\r\n          <div>\r\n            <input type=\"radio\" id=\"slow\" name=\"speed\" onChange={() => setAnimationSpeed(25)} />\r\n            <label htmlFor=\"slow\">Slow</label>\r\n          </div>\r\n          <div>\r\n            <input type=\"radio\" id=\"normal\" name=\"speed\" checked onChange={() => setAnimationSpeed(5)} />\r\n            <label htmlFor=\"normal\">Normal</label>\r\n          </div>\r\n          <div>\r\n            <input type=\"radio\" id=\"fast\" name=\"speed\" onChange={() => setAnimationSpeed(1)} />\r\n            <label htmlFor=\"fast\">Fast</label>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid-canvas-controls\">\r\n          <button id=\"btn find-path\" type=\"button\" onClick={() => clickFindPath(grid)}>Find Path</button>\r\n          <button id=\"btn clear\" type=\"button\" onClick={() => resetGrid()}>Clear</button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default GridCanvas\r\n","import React, { useState, useLayoutEffect } from 'react'\r\nimport GridCanvas from './components/grid-canvas'\r\nimport './app.css'\r\n\r\nfunction App() {\r\n  const [canvasWidth, setCanvasWidth] = useState(25)\r\n  const [canvasHeight, setCanvasHeight] = useState(25)\r\n\r\n  useLayoutEffect(() => {\r\n    function updateSize() {\r\n      if (window.outerWidth < 576) {\r\n        setCanvasWidth(10)\r\n        setCanvasHeight(15)\r\n      } else if (window.outerWidth < 768) {\r\n        setCanvasWidth(15)\r\n        setCanvasHeight(15)\r\n      } else if (window.outerWidth < 992) {\r\n        setCanvasWidth(25)\r\n        setCanvasHeight(25)\r\n      }\r\n    }\r\n    window.addEventListener('resize', updateSize)\r\n    updateSize()\r\n    return () => window.removeEventListener('resize', updateSize)\r\n  }, [])\r\n\r\n  return (\r\n    <div className=\"app\">\r\n      <header className=\"app-header\">\r\n        <p>A* Search Algorithm</p>\r\n      </header>\r\n      <div className=\"grid-container\">\r\n        <GridCanvas\r\n          width={canvasWidth}\r\n          height={canvasHeight}\r\n          nodeSize={25}\r\n          nodeStroke={2}\r\n        />\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './app';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}